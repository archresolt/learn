package util;

import java.lang.reflect.Field;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class DBUtil {
	/*
	 * 通用查询 查询的SQL语句 要将sql查询的结果封装成className类型的对象
	 */
	public static List<Object> select(String sql,String className){
		ArrayList<Object> list = null;
		try {
			//通过类名来获取类的反射
			Class cls = Class.forName(className);
			//通过反射获取到该类中所包含的成员变量
			Field[] fs = cls.getDeclaredFields();
			
			//执行sql语句 获取查询结果
			Statement stmt = JdbcTest.getStatement();
			ResultSet set = stmt.executeQuery(sql);
			//获取查询结果的信息
			ResultSetMetaData metaData = set.getMetaData();
			//获取查询结果有多少列
			int columnCount = metaData.getColumnCount();
			//创建一个数组  用来存放每一列的名字
			String[] columnName = new String[columnCount];
			for (int i = 1;i<=columnName.length;i++){
				columnName[i - 1] = metaData.getColumnName(i);
			}
			//创建一个list来存放解析出来的对象
			list = new ArrayList<Object>();
			while (set.next()){
				//结果集中有一条新的数据  创建一个对象来存放这条数据
				Object obj = cls.newInstance();
				list.add(obj);
				//循环存放列名的数组，循环一次得到一个列的名字
				for (String colName : columnName){
					//寻找和列名同名的属性，将该累的值赋给该属性
					for(Field field : fs){
						//如果属性和列名同名，则获取该列的值，给对象这个属性去赋值
						if(colName.toUpperCase().equals(field.getName().toUpperCase())){
							//判断该属性的类型
							if("java.lang.String".equals(field.getType().getName())){
								//如果是字符串类型
								String value = set.getString(colName);
								field.set(obj,value);
							}
						}
					}
				}
			}
		}
	}
}
